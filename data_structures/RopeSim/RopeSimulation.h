#pragma once
#include <string>
#include <fstream>
#include <utility>
#include <vector>
#include <sstream>
#include <cmath>
#include <iostream>
#include <unordered_map>
#include "SimulationGrid.h"

class RopeSimulation {
public:
    typedef std::pair<int, int> Knot;
    typedef std::vector<Knot> State;

    RopeSimulation(const std::string& input_filename);

    // Return a vector of states generated by running the simulation
    std::vector<State>* run(int num_knots=2) const;

    // Animate the vector of states generated by running the simulation
    void animate(int num_knots, std::ostream& out, int width, int height, int fps=60) const;

    void save_sim(int num_knots, const std::string& output_filename) const;
private:
    std::vector<std::pair<char, int>> moves;
    void update_tail(const Knot& head_pos, Knot& tail_pos) const;
    static std::string knot_to_string(Knot knot);
    static double knot_dist(Knot knot1, Knot knot2);
};